import 'package:flutter/material.dart';

class AppointmentPage extends StatefulWidget {
  const AppointmentPage({super.key});

  @override
  _AppointmentPageState createState() => _AppointmentPageState();
}

class _AppointmentPageState extends State<AppointmentPage> {
  int selectedDateIndex = 0;
  int selectedTimeIndex = -1;
  String? selectedBranch;
  String? selectedSpecialization;

  final List<String> dates = ['Sa 08', 'Su 09', 'Mo 10', 'Tu 11', 'We 12', 'Th 13'];
  final List<String> times = [
    '10:00 AM', '11:00 AM', '11:30 AM', '12:00 PM',
    '12:30 PM', '01:00 PM', '01:30 PM', '02:00 PM',
    '03:00 PM', '03:30 PM', '04:00 PM', '05:00 PM'
  ];

  final Map<String, List<String>> branchSpecializations = {
    "Branch A": ["Cardiology", "Neurology", "Orthopedics"],
    "Branch B": ["Dermatology", "Pediatrics"],
    "Branch C": ["Oncology", "Radiology"],
    "Branch D": ["Gynecology", "ENT", "General Surgery"],
  };

  List<String> getSpecializations() {
    return selectedBranch != null ? branchSpecializations[selectedBranch!]! : [];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('Book Appointment', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
        backgroundColor: Colors.transparent,
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Branch Dropdown
            const Text('Select Hospital Branch', style: TextStyle(color: Colors.white, fontSize: 16)),
            DropdownButton<String>(
              value: selectedBranch,
              hint: Text("Choose a branch"),
              isExpanded: true,
              items: branchSpecializations.keys.map((branch) {
                return DropdownMenuItem<String>(
                  value: branch,
                  child: Text(branch),
                );
              }).toList(),
              onChanged: (value) {
                setState(() {
                  selectedBranch = value;
                  selectedSpecialization = null;
                });
              },
            ),
            const SizedBox(height: 20),
            // Specialization Dropdown
            const Text('Select Specialization', style: TextStyle(color: Colors.white, fontSize: 16)),
            DropdownButton<String>(
              value: selectedSpecialization,
              hint: Text("Choose specialization"),
              isExpanded: true,
              items: getSpecializations().map((specialization) {
                return DropdownMenuItem<String>(
                  value: specialization,
                  child: Text(specialization),
                );
              }).toList(),
              onChanged: selectedBranch == null
                  ? null
                  : (value) {
                      setState(() {
                        selectedSpecialization = value;
                      });
                    },
            ),
            const SizedBox(height: 20),
            // Date selection
            const Text('Select Date', style: TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold)),
            const SizedBox(height: 15),
            SizedBox(
              height: 80,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: dates.length,
                itemBuilder: (context, index) {
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        selectedDateIndex = index;
                      });
                    },
                    child: AnimatedContainer(
                      duration: const Duration(milliseconds: 300),
                      width: 70,
                      margin: const EdgeInsets.symmetric(horizontal: 5),
                      decoration: BoxDecoration(
                        color: selectedDateIndex == index ? const Color(0xff13a8b4) : const Color.fromARGB(255, 243, 243, 243),
                        borderRadius: BorderRadius.circular(15),
                      ),
                      child: Center(
                        child: Text(
                          dates[index],
                          style: TextStyle(
                            color: selectedDateIndex == index ? Colors.white : const Color.fromARGB(255, 0, 0, 0),
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(height: 20),
            // Time selection
            Expanded(
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 3,
                  childAspectRatio: 2.5,
                  crossAxisSpacing: 15,
                  mainAxisSpacing: 15,
                ),
                itemCount: times.length,
                itemBuilder: (context, index) {
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        selectedTimeIndex = index;
                      });
                    },
                    child: AnimatedContainer(
                      duration: const Duration(milliseconds: 300),
                      decoration: BoxDecoration(
                        color: selectedTimeIndex == index ? const Color(0xff13a8b4) : const Color.fromARGB(255, 242, 242, 242),
                        borderRadius: BorderRadius.circular(15),
                      ),
                      child: Center(
                        child: Text(
                          times[index],
                          style: TextStyle(
                            color: selectedTimeIndex == index ? Colors.white : const Color.fromARGB(255, 0, 0, 0),
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(height: 20),
            // Confirm Button
            Center(
              child: ElevatedButton(
                onPressed: () {
                  if (selectedDateIndex != -1 && selectedTimeIndex != -1 && selectedBranch != null && selectedSpecialization != null) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Appointment booked at $selectedBranch for $selectedSpecialization on ${dates[selectedDateIndex]} at ${times[selectedTimeIndex]}'),
                        backgroundColor: Colors.green,
                      ),
                    );
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Please complete all selections.'),
                        backgroundColor: Colors.red,
                      ),
                    );
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xff13a8b4),
                  padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                ),
                child: const Text('Confirm Appointment', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold,color: Colors.white)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
